name: AI Service Pipelines

on:
  workflow_dispatch:
    inputs:
      steps_to_run:
        description: 'Steps to run'
        required: true
        type: choice
        options:
          - build_and_push
          - deploy
      environment:
        description: 'Environment(s)'
        required: true
        type: multiselect
        options:
          - dev
          - stg
          - prod

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.setenv.outputs.tag }}
      acr_username: ${{ steps.setenv.outputs.acr_username }}
      acr_password: ${{ steps.setenv.outputs.acr_password }}
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment }}
    steps:
      - name: Set Tag and Credentials
        id: setenv
        run: |
          echo "tag=${{ matrix.env }}" >> $GITHUB_OUTPUT

          if [ "${{ matrix.env }}" = "dev" ]; then
            echo "acr_username=${{ secrets.DEV_ACR_USERNAME }}" >> $GITHUB_OUTPUT
            echo "acr_password=${{ secrets.DEV_ACR_PASSWORD }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.env }}" = "stg" ]; then
            echo "acr_username=${{ secrets.STG_ACR_USERNAME }}" >> $GITHUB_OUTPUT
            echo "acr_password=${{ secrets.STG_ACR_PASSWORD }}" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.env }}" = "prod" ]; then
            echo "acr_username=${{ secrets.PROD_ACR_USERNAME }}" >> $GITHUB_OUTPUT
            echo "acr_password=${{ secrets.PROD_ACR_PASSWORD }}" >> $GITHUB_OUTPUT
          fi

  build_and_push:
    if: ${{ github.event.inputs.steps_to_run == 'build_and_push' }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        run: echo "${{ needs.setup.outputs.acr_password }}" | docker login actionagent.azurecr.io -u "${{ needs.setup.outputs.acr_username }}" --password-stdin

      - name: Build & Push ai-service
        run: |
          docker build -t actionagent.azurecr.io/ai-service:${{ matrix.env }} ./ai-service
          docker push actionagent.azurecr.io/ai-service:${{ matrix.env }}

      - name: Notify Discord (Build)
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"**✅ [${{ matrix.env }} BUILD SUCCESS]**\\n- **Service:** \`ai-service\`\\n- **Image:** \`actionagent.azurecr.io/ai-service:${{ matrix.env }}\`\\n- **Branch:** \\`${{ github.ref_name }}\`\\n- **Triggered by:** \\`${{ github.actor }}\`\\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy:
    if: ${{ github.event.inputs.steps_to_run == 'deploy' }}
    needs: [setup, build_and_push]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ github.event.inputs.environment }}
    steps:
      - name: Deploy ai-service
        run: |
          echo "Deploying AI Service to ${{ matrix.env }}..."
          # Add your deployment script here

      - name: Notify Discord (Deploy)
        run: |
          curl -X POST -H "Content-Type: application/json" -d "{\"content\": \"**✅ [${{ matrix.env }} DEPLOY SUCCESS]**\\n- **Service:** \`ai-service\`\\n- **Image:** \`actionagent.azurecr.io/ai-service:${{ matrix.env }}\`\\n- **Branch:** \\`${{ github.ref_name }}\`\\n- **Triggered by:** \\`${{ github.actor }}\`\\n- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')\"}" ${{ secrets.DISCORD_WEBHOOK_URL }}
