name: API Gateway Pipelines

on:
  workflow_dispatch:
    inputs:
      build_and_push_stg:
        description: 'Run Build & Push for Staging'
        required: false
        default: false
        type: boolean
      deploy_stg:
        description: 'Run Deploy for Staging'
        required: false
        default: false
        type: boolean
      build_and_push_prod:
        description: 'Run Build & Push for Production'
        required: false
        default: false
        type: boolean
      deploy_prod:
        description: 'Run Deploy for Production'
        required: false
        default: false
        type: boolean

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environments and get last commit message
        id: setup
        run: |
          # Initialize variables
          ENV_TAGS=""
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Set environment tags based on selected options
          if [ "${{ github.event.inputs.build_and_push_stg }}" == "true" ]; then
            ENV_TAGS="${ENV_TAGS}stg "
          fi
          if [ "${{ github.event.inputs.build_and_push_prod }}" == "true" ]; then
            ENV_TAGS="${ENV_TAGS}prod"
          fi

          # Save variables to environment for later use
          echo "ENV_TAGS=${ENV_TAGS}" >> $GITHUB_ENV
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          
          # Output variables for debugging purposes
          echo "ENV_TAGS=${{ env.ENV_TAGS }}"
          echo "COMMIT_MSG=${{ env.COMMIT_MSG }}"

  build_and_push:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build_and_push_stg == 'true' || github.event.inputs.build_and_push_prod == 'true' }}
    needs: setup
    strategy:
      matrix:
        env: [${{ fromJson(env.ENV_TAGS) }}]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker Build & Push for ${{ matrix.env }}
        uses: ./.github/actions/docker-build-push
        with:
          acr_username: ${{ secrets.ACR_USERNAME }}
          acr_password: ${{ secrets.ACR_PASSWORD }}
          image_name: 'api-gateway'
          tag: ${{ matrix.env }}
          folder: './api-gateway'

      - name: Send notification to Discord (Build ${{ matrix.env }})
        uses: ./.github/actions/notify-discord
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          service: 'api-gateway'
          image: 'actionagent.azurecr.io/api-gateway:${{ matrix.env }}'
          branch: 'dev'
          commit_message: '${{ env.COMMIT_MSG }}'
          triggered_by: ${{ github.actor }}
          time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          action: 'BUILD'

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy_stg == 'true' || github.event.inputs.deploy_prod == 'true' }}
    needs: [setup, build_and_push]
    strategy:
      matrix:
        env: [${{ fromJson(env.ENV_TAGS) }}]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy API Gateway to ${{ matrix.env }}
        uses: ./.github/actions/deploy
        with:
          environment: ${{ matrix.env }}
          deploy_command: 'kubectl apply -f deployment.yaml'

      - name: Send notification to Discord (Deploy ${{ matrix.env }})
        uses: ./.github/actions/notify-discord
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          service: 'api-gateway'
          image: 'actionagent.azurecr.io/api-gateway:${{ matrix.env }}'
          branch: 'main'
          commit_message: '${{ env.COMMIT_MSG }}'
          triggered_by: ${{ github.actor }}
          time: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          action: 'DEPLOY'
