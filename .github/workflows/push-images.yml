name: Build and Push Docker Images to ACR
on:
  push:
    branches:
      - dev
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ai: ${{ steps.filter.outputs.ai }}
      gw: ${{ steps.filter.outputs.gw }}
      user: ${{ steps.filter.outputs.user }}
      log: ${{ steps.filter.outputs.log }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            ai: 'ai-service/**'
            gw: 'api-gateway/**'
            user: 'user-service/**'
            log: 'log-service/**'

  build-and-push:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ai == 'true' || 
        needs.detect-changes.outputs.gw == 'true' || 
        needs.detect-changes.outputs.user == 'true' || 
        needs.detect-changes.outputs.log == 'true'
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }}
        tenant-id: ${{ vars.AZURE_TENANT_ID }}
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

    - name: Log in to ACR
      run: az acr login --name ${{ vars.ACR_NAME }}

    # Build & Push AI Service (if changed)
    - name: Build & Push AI Service
      if: needs.detect-changes.outputs.ai == 'true'
      working-directory: ./ai-service
      env:
        ACR_NAME: ${{ vars.ACR_NAME }}
      run: |
        IMAGE_TAG=${ACR_NAME}.azurecr.io/ai-service:latest
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    # Build & Push API Gateway (if changed)
    - name: Build & Push API Gateway
      if: needs.detect-changes.outputs.gw == 'true'
      working-directory: ./api-gateway
      env:
        ACR_NAME: ${{ vars.ACR_NAME }}
      run: |
        IMAGE_TAG=${ACR_NAME}.azurecr.io/api-gateway:latest
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    # Build & Push User Service (if changed)
    - name: Build & Push User Service
      if: needs.detect-changes.outputs.user == 'true'
      working-directory: ./user-service
      env:
        ACR_NAME: ${{ vars.ACR_NAME }}
      run: |
        IMAGE_TAG=${ACR_NAME}.azurecr.io/user-service:latest
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    # Build & Push Log Service (if changed)
    - name: Build & Push Log Service
      if: needs.detect-changes.outputs.log == 'true'
      working-directory: ./log-service
      env:
        ACR_NAME: ${{ vars.ACR_NAME }}
      run: |
        IMAGE_TAG=${ACR_NAME}.azurecr.io/log-service:latest
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

    - name: Logout from Azure
      run: az logout

  # Deploy updated services via SSH
  deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Services to Update
        run: |
          SERVICES_TO_UPDATE="ai-service api-gateway user-service log-service"
          if [[ -z "$SERVICES_TO_UPDATE" ]]; then
            echo "No services changed, skipping deployment."
            exit 0
          fi
          
          echo "SERVICES_TO_UPDATE=$SERVICES_TO_UPDATE" >> $GITHUB_ENV

      - name: Setup WireGuard VPN
        run: |
          sudo mkdir -p /etc/wireguard
          echo "$WIREGUARD_CLIENT_CONF" | sudo tee /etc/wireguard/wg-client.conf > /dev/null
          sudo apt update && sudo apt install -y wireguard
          sudo wg-quick up wg-client
        env:
          WIREGUARD_CLIENT_CONF: ${{ secrets.WIREGUARD_CLIENT_CONF }}

      - name: Setup SSH Key
        run: |
          echo "$SSH_PRIVATE_KEY" | base64 -d > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into VM and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -t -t -i private_key.pem dev@$VM_PRIVATE_IP <<EOF
            cd ~/Action-Agent-BE
            docker compose pull $SERVICES_TO_UPDATE
            docker compose up -d --build $SERVICES_TO_UPDATE
            exit
          EOF
        env:
          VM_PRIVATE_IP: ${{ secrets.VM_PRIVATE_IP }}

      - name: Teardown WireGuard VPN
        if: always()
        run: sudo wg-quick down wg-client