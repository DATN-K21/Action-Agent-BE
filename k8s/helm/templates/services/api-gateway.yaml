{{- if .Values.services.apiGateway.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "action-agent.fullname" . }}-api-gateway
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
spec:
  replicas: {{ .Values.services.apiGateway.replicaCount }}
  selector:
    matchLabels:
      {{- include "action-agent.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api-gateway
  template:
    metadata:
      labels:
        {{- include "action-agent.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api-gateway
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/security/secrets.yaml") . | sha256sum }}
    spec:
      {{- with .Values.services.apiGateway.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "action-agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.services.apiGateway.podSecurityContext | nindent 8 }}
      containers:
        - name: api-gateway
          securityContext:
            {{- toYaml .Values.services.apiGateway.securityContext | nindent 12 }}
          image: {{ include "action-agent.image" (dict "Values" .Values "repository" .Values.services.apiGateway.image.repository "tag" .Values.services.apiGateway.image.tag) }}
          imagePullPolicy: {{ .Values.services.apiGateway.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.services.apiGateway.service.port }}
              protocol: TCP
          env:
            - name: PORT
              value: {{ .Values.services.apiGateway.service.port | quote }}
            - name: NODE_ENV
              value: {{ .Values.global.environment }}
            {{- if .Values.services.apiGateway.ssl.enabled }}
            - name: HTTPS_PORT
              value: {{ .Values.services.apiGateway.service.port | quote }}
            {{- end }}
            {{- range $key, $value := .Values.services.apiGateway.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- if .Values.secrets.enabled }}
            - secretRef:
                name: {{ include "action-agent.secretName" (dict "root" . "service" "api-gateway") }}
            {{- end }}
            {{- range .Values.services.apiGateway.extraSecrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.services.apiGateway.healthCheck.path }}
              port: http
              {{- if .Values.services.apiGateway.ssl.enabled }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: {{ .Values.services.apiGateway.healthCheck.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.services.apiGateway.healthCheck.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.services.apiGateway.healthCheck.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.services.apiGateway.healthCheck.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.services.apiGateway.healthCheck.path }}
              port: http
              {{- if .Values.services.apiGateway.ssl.enabled }}
              scheme: HTTPS
              {{- end }}
            initialDelaySeconds: {{ .Values.services.apiGateway.healthCheck.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.services.apiGateway.healthCheck.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.services.apiGateway.healthCheck.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.services.apiGateway.healthCheck.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.services.apiGateway.resources | nindent 12 }}
          {{- if .Values.services.apiGateway.ssl.enabled }}
          volumeMounts:
            - name: ssl-certs
              mountPath: /usr/src/app/certs
              readOnly: true
          {{- end }}
      {{- if .Values.services.apiGateway.ssl.enabled }}
      volumes:
        - name: ssl-certs
          secret:
            secretName: {{ .Values.services.apiGateway.ssl.secretName }}
      {{- end }}
      {{- with .Values.services.apiGateway.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.apiGateway.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.apiGateway.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "action-agent.fullname" . }}-api-gateway
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
  {{- with .Values.services.apiGateway.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.services.apiGateway.service.type }}
  {{- if and (eq .Values.services.apiGateway.service.type "LoadBalancer") .Values.services.apiGateway.service.loadBalancerIP }}
  loadBalancerIP: {{ .Values.services.apiGateway.service.loadBalancerIP }}
  {{- end }}
  ports:
    - port: {{ .Values.services.apiGateway.service.port }}
      targetPort: http
      protocol: TCP
      name: http
      {{- if and (or (eq .Values.services.apiGateway.service.type "NodePort") (eq .Values.services.apiGateway.service.type "LoadBalancer")) .Values.services.apiGateway.service.nodePort }}
      nodePort: {{ .Values.services.apiGateway.service.nodePort }}
      {{- end }}
  selector:
    {{- include "action-agent.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: api-gateway
{{- end }}
