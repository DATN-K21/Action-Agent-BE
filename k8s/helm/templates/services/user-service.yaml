{{- /*
───────────────────────────────────────────────────────────────
  USER-DATABASE (optional MongoDB)
───────────────────────────────────────────────────────────────
*/ -}}
{{- if and .Values.userService.enabled .Values.userService.database.enabled }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "action-agent.fullname" . }}-mongo-database
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app: mongo-database
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "action-agent.selectorLabels" . | nindent 6 }}
      app: mongo-database
  template:
    metadata:
      labels:
        {{- include "action-agent.selectorLabels" . | nindent 8 }}
        app: mongo-database
    spec:
      containers:
        - name: mongodb
          image: "{{ .Values.userService.database.image.repository }}:{{ .Values.userService.database.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: mongo
              containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              value: {{ .Values.userService.database.username | quote }}
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: {{ .Values.userService.database.password | quote }}
          envFrom:
            {{- if .Values.secrets.createSecrets }}
            - secretRef:
                name: {{ include "action-agent.secretName" (dict "root" . "name" "user-db") }}
            {{- end }}
          {{- if .Values.userService.database.persistence.enabled }}
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
          {{- end }}
          resources:
            limits:
              cpu: 1000m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 256Mi
      {{- if .Values.userService.database.persistence.enabled }}
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: {{ include "action-agent.fullname" . }}-mongo-database-pvc
      {{- else }}
      volumes:
        - name: mongo-data
          emptyDir: {}
      {{- end }}

{{- if .Values.userService.database.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "action-agent.fullname" . }}-mongo-database-pvc
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: {{ .Values.userService.database.persistence.size }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "action-agent.fullname" . }}-mongo-database
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
spec:
  selector:
    {{- include "action-agent.selectorLabels" . | nindent 4 }}
    app: mongo-database
  ports:
    - name: mongo
      protocol: TCP
      port: 27017
      targetPort: 27017

{{- end }}   {{/* END database.enabled */}}

{{- /*
───────────────────────────────────────────────────────────────
  USER-SERVICE  (main application)
───────────────────────────────────────────────────────────────
*/ -}}
{{- if .Values.userService.enabled }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "action-agent.fullname" . }}-user-service
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app: user-service
spec:
  replicas: {{ .Values.userService.replicaCount }}
  selector:
    matchLabels:
      {{- include "action-agent.selectorLabels" . | nindent 6 }}
      app: user-service
  template:
    metadata:
      labels:
        {{- include "action-agent.selectorLabels" . | nindent 8 }}
        app: user-service
    spec:
      containers:
        - name: user-service
          image: {{ include "action-agent.image" (dict "root" . "image" .Values.userService.image) }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          ports:
            - name: http
              containerPort: {{ .Values.userService.service.port }}
          env:
            - name: PORT
              value: {{ .Values.userService.service.port | quote }}
            - name: MONGODB_CONNECTION_STRING
              value: "mongodb://{{ .Values.userService.database.username }}:{{ .Values.userService.database.password }}@{{ include "action-agent.fullname" . }}-mongo-database:27017/user-service?authSource=admin"
          envFrom:
            {{- if .Values.secrets.createSecrets }}
            - secretRef:
                name: {{ include "action-agent.secretName" (dict "root" . "name" "user-service") }}
            - secretRef:
                name: {{ include "action-agent.secretName" (dict "root" . "name" "email") }}
            {{- end }}
          resources:
            {{- toYaml .Values.userService.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.userService.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ping
              port: {{ .Values.userService.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "action-agent.fullname" . }}-user-service
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
spec:
  type: {{ .Values.userService.service.type | default "ClusterIP" }}
  selector:
    {{- include "action-agent.selectorLabels" . | nindent 4 }}
    app: user-service
  ports:
    - name: http
      protocol: TCP
      port: {{ .Values.userService.service.port }}
      targetPort: {{ .Values.userService.service.port }}

{{- end }}   {{/* END userService.enabled */}}
