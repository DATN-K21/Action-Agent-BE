{{- if .Values.services.userService.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "action-agent.fullname" . }}-user-service
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-service
spec:
  replicas: {{ .Values.services.userService.replicaCount }}
  selector:
    matchLabels:
      {{- include "action-agent.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: user-service
  template:
    metadata:
      labels:
        {{- include "action-agent.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: user-service
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/security/secrets.yaml") . | sha256sum }}
    spec:
      {{- with .Values.services.userService.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "action-agent.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.services.userService.podSecurityContext | nindent 8 }}
      containers:
        - name: user-service
          securityContext:
            {{- toYaml .Values.services.userService.securityContext | nindent 12 }}
          image: {{ include "action-agent.image" (dict "Values" .Values "repository" .Values.services.userService.image.repository "tag" .Values.services.userService.image.tag) }}
          imagePullPolicy: {{ .Values.services.userService.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.services.userService.service.port }}
              protocol: TCP
          env:
            - name: PORT
              value: {{ .Values.services.userService.service.port | quote }}
            - name: NODE_ENV
              value: {{ .Values.global.environment | quote }}
            {{- if .Values.databases.userDatabase.enabled }}
            - name: MONGODB_CONNECTION_STRING
              value: "mongodb://{{ .Values.databases.userDatabase.auth.username }}:{{ .Values.databases.userDatabase.auth.password }}@{{ include "action-agent.fullname" . }}-user-db:27017/{{ .Values.databases.userDatabase.database }}?authSource={{ .Values.databases.userDatabase.database }}"
            {{- else if .Values.external.userDatabase.enabled }}
            - name: MONGODB_CONNECTION_STRING
              value: {{ .Values.external.userDatabase.url | quote }}
            {{- end }}
            - name: API_GATEWAY_URL
              value: "http://{{ include "action-agent.fullname" . }}-api-gateway:{{ .Values.services.apiGateway.service.port }}"
            - name: AI_SERVICE_URL
              value: "http://{{ include "action-agent.fullname" . }}-ai-service:{{ .Values.services.aiService.service.port }}"
            - name: REDIS_HOST
              value: "{{ include "action-agent.fullname" . }}-redis"
            - name: REDIS_PORT
              value: {{ .Values.databases.redis.service.port | quote }}
            - name: REDIS_USER
              value: "default"
            - name: REDIS_PASSWORD
              value: {{ .Values.databases.redis.auth.password | quote }}
            {{- range $key, $value := .Values.services.userService.extraEnv }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          envFrom:
            {{- if .Values.secrets.enabled }}
            - secretRef:
                name: {{ include "action-agent.secretName" (dict "root" . "service" "user-service") }}
            {{- end }}
            {{- range .Values.services.userService.extraSecrets }}
            - secretRef:
                name: {{ . }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: {{ .Values.services.userService.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.services.userService.healthCheck.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.services.userService.healthCheck.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.services.userService.healthCheck.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.services.userService.healthCheck.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.services.userService.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.services.userService.healthCheck.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.services.userService.healthCheck.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.services.userService.healthCheck.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.services.userService.healthCheck.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.services.userService.resources | nindent 12 }}
      {{- with .Values.services.userService.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.userService.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.services.userService.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "action-agent.fullname" . }}-user-service
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-service
  {{- with .Values.services.userService.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ .Values.services.userService.service.type }}
  ports:
    - port: {{ .Values.services.userService.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "action-agent.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: user-service
{{- end }}
