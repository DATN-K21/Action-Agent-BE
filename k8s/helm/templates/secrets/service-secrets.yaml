{{- /*
-----------------------------------------------------------------
  PER-SERVICE SECRETS  (only when createSecrets=true)
-----------------------------------------------------------------
*/ -}}
{{- if .Values.secrets.createSecrets }}

# ----------------------------  USER DB  ----------------------------
{{- if .Values.userService.database.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "user-db") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.userService.database.username | quote }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.userService.database.password | quote }}
  MONGODB_CONNECTION_STRING: {{ include "action-agent.mongoConnectionString" . | quote }}
{{- end }}

# ----------------------------  AI  DB  -----------------------------
{{- if .Values.aiService.database.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "ai-db") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  POSTGRES_USER:     {{ .Values.aiService.database.username | quote }}
  POSTGRES_PASSWORD: {{ .Values.aiService.database.password | quote }}
  POSTGRES_DB:       {{ .Values.aiService.database.name | quote }}
  DATABASE_URL:      {{ include "action-agent.postgresConnectionString" . | quote }}
{{- end }}

# ----------------------------  USER SERVICE  -----------------------
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "user-service") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  MONGODB_CONNECTION_STRING: >
    {{- if .Values.userService.database.enabled }}
    {{ include "action-agent.mongoConnectionString" . }}
    {{- else }}
    {{ .Values.externalServices.mongoUrl }}
    {{- end }}
  JWT_SECRET:       {{ .Values.config.jwt.secret | quote }}
  REDIS_PASSWORD:   {{ .Values.redis.auth.password | quote }}

# ----------------------------  AI SERVICE  -------------------------
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "ai-service") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  DATABASE_URL: >
    {{- if .Values.aiService.database.enabled }}
    {{ include "action-agent.postgresConnectionString" . }}
    {{- else }}
    {{ .Values.externalServices.postgresUrl }}
    {{- end }}

# ----------------------------  API GATEWAY  ------------------------
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "api-gateway") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  USER_SERVICE_URL:       "http://{{ include "action-agent.fullname" . }}-user-service:{{ .Values.userService.service.port }}"
  AI_SERVICE_URL:         "http://{{ include "action-agent.fullname" . }}-ai-service:{{ .Values.aiService.service.port }}"
  EXTENSION_SERVICE_URL:  "http://{{ include "action-agent.fullname" . }}-extension-service:{{ .Values.extensionService.service.port }}"

  REDIS_URL: >
    {{- if .Values.redis.enabled }}
    redis://{{ include "action-agent.fullname" . }}-redis:{{ .Values.redis.service.port }}
    {{- else }}
    {{ .Values.externalServices.redisUrl }}
    {{- end }}

  RABBITMQ_URL: >
    {{- if .Values.rabbitmq.enabled }}
    amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@
    {{ include "action-agent.fullname" . }}-rabbitmq:{{ .Values.rabbitmq.service.port }}
    {{- else }}
    {{ .Values.externalServices.rabbitmqUrl }}
    {{- end }}

  ELASTICSEARCH_URL: >
    {{- if .Values.elasticsearch.enabled }}
    http://{{ include "action-agent.fullname" . }}-elasticsearch:{{ .Values.elasticsearch.service.port }}
    {{- else }}
    {{ .Values.externalServices.elasticUrl }}
    {{- end }}

# ----------------------------  EXTENSION SERVICE  ----------------
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "extension-service") }}
  namespace: {{ .Values.global.namespace }}
  labels: {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  DATABASE_URL: >
    {{- if .Values.extensionService.database.enabled }}
    mongodb://{{ .Values.extensionService.database.username }}:{{ .Values.extensionService.database.password }}@{{ include "action-agent.fullname" . }}-extension-database:27017/extension-service?authSource=admin
    {{- else }}
    {{ .Values.externalServices.mongoUrl }}
    {{- end }}
  JWT_SECRET: {{ .Values.config.jwt.secret | quote }}

{{- end }}   # createSecrets
