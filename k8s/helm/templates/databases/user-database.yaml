{{- if and .Values.databases.userDatabase.enabled (not .Values.external.userDatabase.enabled) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "action-agent.fullname" . }}-user-db-init
  namespace: {{ .Values.global.namespace }}
data:
  create-user.js: |
    db = db.getSiblingDB("{{ .Values.databases.userDatabase.database }}");
    db.createUser({
      user:   "{{ .Values.databases.userDatabase.auth.username }}",
      pwd:    "{{ .Values.databases.userDatabase.auth.password }}",
      roles:  [{ role: "readWrite", db: "{{ .Values.databases.userDatabase.database }}" }]
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "action-agent.fullname" . }}-user-db
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-db
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "action-agent.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: user-db
  template:
    metadata:
      labels:
        {{- include "action-agent.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: user-db
    spec:
      securityContext:
        {{- toYaml .Values.databases.userDatabase.podSecurityContext | nindent 8 }}
      containers:
        - name: user-db
          securityContext:
            {{- toYaml .Values.databases.userDatabase.securityContext | nindent 12 }}
          image: "{{ .Values.databases.userDatabase.image.repository }}:{{ .Values.databases.userDatabase.image.tag }}"
          imagePullPolicy: {{ .Values.databases.userDatabase.image.pullPolicy }}
          ports:
            - name: user-db
              containerPort: {{ .Values.databases.userDatabase.service.port }}
              protocol: TCP
          env:
            - name: MONGO_INITDB_DATABASE
              value: {{ .Values.databases.userDatabase.database | quote }}
          resources:
            {{- toYaml .Values.databases.userDatabase.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.databases.userDatabase.persistence.enabled }}
            - name: user-db-data
              mountPath: /data/db
            {{- end }}
            - name: user-db-init
              mountPath: /docker-entrypoint-initdb.d/create-user.js
              subPath: create-user.js
          livenessProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongosh
                - --quiet
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: user-db-init
          configMap:
            name: {{ include "action-agent.fullname" . }}-user-db-init
        {{- if .Values.databases.userDatabase.persistence.enabled }}
        - name: user-db-data
          persistentVolumeClaim:
            claimName: {{ include "action-agent.fullname" . }}-user-db-pvc
        {{- end }}
      {{- with .Values.databases.userDatabase.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.databases.userDatabase.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.databases.userDatabase.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- if .Values.databases.userDatabase.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "action-agent.fullname" . }}-user-db-pvc
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-db
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.databases.userDatabase.persistence.size }}
  {{- if .Values.databases.userDatabase.persistence.storageClass }}
  storageClassName: {{ .Values.databases.userDatabase.persistence.storageClass }}
  {{- end }}
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "action-agent.fullname" . }}-user-db
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
    app.kubernetes.io/component: user-db
spec:
  type: ClusterIP
  ports:
    - name: user-db
      port: {{ .Values.databases.userDatabase.service.port }}
      targetPort: user-db
      protocol: TCP
  selector:
    {{- include "action-agent.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: user-db
{{- end }}
