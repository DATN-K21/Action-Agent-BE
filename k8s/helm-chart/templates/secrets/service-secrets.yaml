{{- if and .Values.secrets.createSecrets .Values.userService.database.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "user-db") }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.userService.database.username | quote }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.userService.database.password | quote }}
  MONGODB_CONNECTION_STRING: {{ include "action-agent.mongoConnectionString" . | quote }}

{{- end }}

{{- if and .Values.secrets.createSecrets .Values.aiService.database.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "ai-db") }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  POSTGRES_USER: {{ .Values.aiService.database.username | quote }}
  POSTGRES_PASSWORD: {{ .Values.aiService.database.password | quote }}
  POSTGRES_DB: {{ .Values.aiService.database.name | quote }}
  DATABASE_URL: {{ include "action-agent.postgresConnectionString" . | quote }}

{{- end }}

{{- if .Values.secrets.createSecrets }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "user-service") }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- if .Values.userService.database.enabled }}
  MONGODB_CONNECTION_STRING: {{ include "action-agent.mongoConnectionString" . | quote }}
  {{- else }}
  MONGODB_CONNECTION_STRING: {{ .Values.config.externalMongoUrl | quote }}
  {{- end }}
  JWT_SECRET: {{ .Values.config.jwt.secret | quote }}
  REDIS_PASSWORD: {{ .Values.redis.auth.password | quote }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "ai-service") }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  {{- if .Values.aiService.database.enabled }}
  DATABASE_URL: {{ include "action-agent.postgresConnectionString" . | quote }}
  {{- else }}
  DATABASE_URL: {{ .Values.config.externalPostgresUrl | quote }}
  {{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "action-agent.secretName" (dict "root" . "name" "api-gateway") }}
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "action-agent.labels" . | nindent 4 }}
type: Opaque
stringData:
  USER_SERVICE_URL: "http://{{ include "action-agent.fullname" . }}-user-service:{{ .Values.userService.service.port }}"
  AI_SERVICE_URL: "http://{{ include "action-agent.fullname" . }}-ai-service:{{ .Values.aiService.service.port }}"
  EXTENSION_SERVICE_URL: "http://{{ include "action-agent.fullname" . }}-extension-service:{{ .Values.extensionService.service.port }}"
  {{- if .Values.redis.enabled }}
  REDIS_URL: "redis://{{ include "action-agent.fullname" . }}-redis:{{ .Values.redis.service.port }}"
  {{- else }}
  REDIS_URL: "{{ .Values.config.externalRedisUrl }}"
  {{- end }}
  {{- if .Values.rabbitmq.enabled }}
  RABBITMQ_URL: "amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@{{ include "action-agent.fullname" . }}-rabbitmq:{{ .Values.rabbitmq.service.port }}"
  {{- else }}
  RABBITMQ_URL: "{{ .Values.config.externalRabbitmqUrl }}"
  {{- end }}
  {{- if .Values.elasticsearch.enabled }}
  ELASTICSEARCH_URL: "http://{{ include "action-agent.fullname" . }}-elasticsearch:{{ .Values.elasticsearch.service.port }}"
  {{- else }}
  ELASTICSEARCH_URL: "{{ .Values.config.externalElasticsearchUrl }}"
  {{- end }}

{{- end }}
