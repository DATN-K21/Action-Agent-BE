version: '3'

networks:
  datn_app-network:
    driver: bridge
    name: datn_app-network

services:
  user-service:
    build:
      context: ./user-service # Path to the user service code
    container_name: user-service
    depends_on:
      - log-service
    env_file:
      ./user-service/.env
    environment:
      NODE_ENV: dev
    ports:
      - 8100:8100
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8100/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - datn_app-network

  log-service:
    build:
      context: ./log-service
    container_name: log-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8101:8101
    restart: on-failure
    env_file:
      ./log-service/.env
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8101/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - datn_app-network

  api-gateway:
    build:
      context: ./api-gateway # Path to the API Gateway code
    container_name: api-gateway
    ports:
      - "8081:8081" # Expose API Gateway
    env_file:
      ./api-gateway/.env
    environment:
      NODE_ENV: production
      USER_SERVICE_URL: http://user-service:8100
      LOG_SERVICE_URL: http://log-service:8101
      RABBITMQ_URL: amqp://myuser:mypassword@rabbitmq:5672
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-service: 
        condition: service_healthy
      log-service: 
        condition: service_healthy
      elasticsearch: 
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"] # Replace `/health` with your actual health endpoint
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - datn_app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data # Persistent data storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - datn_app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.16.1
    container_name: logstash
    ports:
      - "5044:5044" # Logstash listening for log inputs
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - logstash_data:/usr/share/logstash/data # Optional: Persist data logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5044 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - datn_app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      SERVER_NAME: "kibana"
      XPACK_SECURITY_ENABLED: "false" # Disable security for local development
    ports:
      - "5601:5601"
    networks:
      - datn_app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692" # Prometheus metrics
    environment:
      RABBITMQ_DEFAULT_USER: myuser
      RABBITMQ_DEFAULT_PASS: mypassword
      RABBITMQ_PLUGINS: rabbitmq_prometheus
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datn_app-network

  centralized-message-producer:
    build:
      context: ./centralized-message-producer
    container_name: centralized-message-producer
    ports:
      - "8102:8102"
    env_file:
      ./centralized-message-producer/.env
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: myuser
      RABBITMQ_PASSWORD: mypassword
    networks:
      - datn_app-network



volumes:
  es_data:
  logstash_data: