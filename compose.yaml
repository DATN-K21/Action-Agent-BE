version: "3.8"

networks:
  app-network:


services:
  user-service:
    build:
      context: ./user-service
    container_name: user-service
    depends_on:
      - log-service
    env_file: ./user-service/.env
    environment:
      NODE_ENV: dev
    ports:
      - 8100:8100
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --spider http://localhost:8100/api/v1/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  log-service:
    build:
      context: ./log-service
      dockerfile: ./Dockerfile
    container_name: log-service
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      logstash:
        condition: service_healthy
    ports:
      - 8200:8200
    restart: on-failure
    env_file: ./log-service/.env
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8200/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - 8300:8300
    env_file: ./api-gateway/.env
    environment:
      NODE_ENV: production
      USER_SERVICE_URL: http://user-service:8100
      LOG_SERVICE_URL: http://log-service:8200
      RABBITMQ_URL: amqp://myuser:mypassword@rabbitmq:5672
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_healthy
      log-service:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8300/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.16.1
    container_name: logstash
    ports:
      - "5044:5044"
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - logstash_data:/usr/share/logstash/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -H 'Content-Type: application/json' -X POST -d '{\"health\": \"check\"}' http://localhost:5044 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      SERVER_NAME: "kibana"
      XPACK_SECURITY_ENABLED: "false"
    ports:
      - "5601:5601"
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    environment:
      RABBITMQ_DEFAULT_USER: myuser
      RABBITMQ_DEFAULT_PASS: mypassword
      RABBITMQ_PLUGINS: rabbitmq_prometheus
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  ####################################################
  ############ AI Service ############################
  ####################################################

  ai-service:
    image: nguyendinhanhvlqt/ai-service
    container_name: ai-service
    env_file: ./ai-service/.env
    environment:
      - POSTGRES_HOST=ai-database
      - POSTGRES_PORT=5432
    ports:
      - "5001:5001"
    networks:
      - app-network

  ai-database:
    image: pgvector/pgvector:pg16
    container_name: ai-database
    healthcheck:
      test: pg_isready -U $POSTGRES_USER
      start_interval: 1s
      start_period: 5s
      interval: 5s
      retries: 5
    environment:
      - POSTGRES_DB=ai-database
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123456
      - POSTGRES_HOST=ai-database
      - POSTGRES_PORT=5432
    ports:
      - 5433:5432
    volumes:
      - ai-database:/var/lib/postgresql/data
    networks:
      - app-network

  migration:
    image: migrate/migrate
    depends_on:
      ai-database:
        condition: service_healthy
    volumes:
      - ./ai-service/migrations:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://postgres:123456@ai-database:5432/ai-database?sslmode=disable", "up" ]
    networks:
      - app-network

volumes:
  es_data:
  logstash_data:
  ai-database:
