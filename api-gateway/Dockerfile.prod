# syntax=docker/dockerfile:1

#######################################
# Stage 1: Build Stage
#######################################
FROM node:18-alpine AS builder

# Set the working directory inside the container.
WORKDIR /usr/src/app

# Copy package.json and package-lock.json to leverage Docker caching.
COPY package*.json ./

# Install all dependencies (including dev dependencies for potential build steps).
RUN npm install

# Copy the rest of the application source code.
COPY . .

# If a build step is required (e.g., transpiling TypeScript), uncomment the following line:
# RUN npm run build

#######################################
# Stage 2: Production Stage
#######################################
FROM node:18-alpine AS runner

# Install curl for health checks
RUN apk add --no-cache curl

# Set the working directory in the final image.
WORKDIR /usr/src/app

# Copy the built (or original) application files from the builder stage.
COPY --from=builder /usr/src/app .

# Install only production dependencies to minimize the final image size.
RUN npm install --only=production

# Expose the application port.
EXPOSE 80

# Define the command to run the application.
CMD ["npm", "start"]
